// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: stubs.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createStub = `-- name: CreateStub :one
INSERT INTO stubs (
  id, name, description, created_by, created_at, updpated_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, created_at, updpated_at, created_by
`

type CreateStubParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedBy   uuid.UUID `json:"created_by"`
	CreatedAt   time.Time `json:"created_at"`
	UpdpatedAt  time.Time `json:"updpated_at"`
}

func (q *Queries) CreateStub(ctx context.Context, arg CreateStubParams) (Stub, error) {
	row := q.db.QueryRow(ctx, createStub,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdpatedAt,
	)
	var i Stub
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdpatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getStubs = `-- name: GetStubs :many
SELECT s.id, s.name, s.description, s.created_at, s.updpated_at, s.created_by, users.id, users.first_name, users.last_name, users.email, users.username, users.birth_date, users.address, users.created_at, users.updpated_at
FROM stubs s
JOIN users ON users.id = s.created_by
ORDER BY s.created_at DESC
`

type GetStubsRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
	UpdpatedAt  time.Time `json:"updpated_at"`
	CreatedBy   uuid.UUID `json:"created_by"`
	User        User      `json:"user"`
}

func (q *Queries) GetStubs(ctx context.Context) ([]GetStubsRow, error) {
	rows, err := q.db.Query(ctx, getStubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStubsRow
	for rows.Next() {
		var i GetStubsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdpatedAt,
			&i.CreatedBy,
			&i.User.ID,
			&i.User.FirstName,
			&i.User.LastName,
			&i.User.Email,
			&i.User.Username,
			&i.User.BirthDate,
			&i.User.Address,
			&i.User.CreatedAt,
			&i.User.UpdpatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
